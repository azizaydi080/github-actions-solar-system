name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db: 
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [18, 20]
        exclude:
          - os: macos-latest
            node-version: 18
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node.js modules
        id: node-cache
        uses: actions/cache@v4
        with:
            path: node_modules
            key: node-modules-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.os }}-${{ matrix.node-version }}
          path: test-results.xml

  code-coverage:
    runs-on: ubuntu-latest
    container: 
      image : node:18 
    services:
      mongo-db: 
       image: siddharth67/mongo-db:non-prod
       options: 
        --name  mongo 

        
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    steps:
      - uses: actions/checkout@v4
   #  - uses: actions/setup-node@v4
    #    with:
     #     node-version: 18
      
      - name: Cache Node.js modules
        id: node-cache
        uses: actions/cache@v4
        with:
            path: node_modules
            key: node-modules-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}   
      - run: npm install
      - continue-on-error: true
        run: npm run coverage

      - uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5
  docker: 
    needs: [unit-testing, code-coverage]
    permissions:
      packages: write
    name: Contenirazation 
    runs-on: ubuntu-latest 
    steps: 
    - name : Checkout 
      uses: actions/checkout@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSOWRD }}
    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      
    - name: Build and Push Docker Image to ghcr and docker hub
      uses: docker/build-push-action@v5
      with:
          context: .  # Path to the Docker build context (usually the root of the repo) # Optional: Build for multiple architectures
          push: true # Push the image to the registry
          tags: ${{ vars.DOCKER_HUB_USERNAME}}/solar-system:${{ github.sha}}
    - name: Run Docker Container
      run: |
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MOMOQ_UNIFORMOD_UNI=${{ secrets.MOMOQ_UNIFORMOD_UNI }} \
              -e MOMOQ_USERNAME=${{ secrets.MOMOQ_USERNAME }} \
              -e MOMOQ_PASSWORD=${{ secrets.MOMOQ_PASSWORD }} \
              ${{ vars.DOCKER_HUB_USERNAME }}/solar-system:${{ github.sha }}
  
    - name: Get Container IP Address
      id: get-ip
      run: |
            export ID=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo "Container IP Address: $ID"
            echo "::set-output name=container_ip::$ID"
  
    - name: Test Image URL using wget
      run: |
            wget -q -O - http://127.0.0.1:3000/live | grep live
    - name: Build and Push Docker Image to ghcr and docker hub       
      uses: docker/build-push-action@v5
      with:
         context: .   
         push: true
         tags: |
          ${{vars.DOCKER_HUB_USERNAME}}/solar-system:${{ github.sha}}
          ghcr.io/${{github.repository_owner}}/solar-system:${{github.sha}}
  dev-deploy: 
    needs: docker
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name : Install azuure cli 
        uses: azure/setup-kubectl@v3 
        with : 
          version: 'v1.26.0'
      - name: set kubseconfig
        uses: azure/k8s-set-context@v3
        with: 
          method: kubeconfig
          kubeconfig: $${{secrets.KUBECONFIG}}
          
      - name: Fetch kubernetes details
        run: |
          kubectl version --short 
          echo --------------------------
          kubectl get nodes 